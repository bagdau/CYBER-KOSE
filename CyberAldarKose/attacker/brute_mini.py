import tkinter as tk
import subprocess
import os
import sys

def start_application():
    # Закрываем окно соглашения
    agreement_window.destroy()

    # Путь к основному графическому скрипту
    script_path = os.path.join(os.path.dirname(__file__), "brute_gui.py")

    # Проверяем, существует ли файл
    if not os.path.exists(script_path):
        print(f"Ошибка: файл {script_path} не найден!")
        return

    # Пытаемся запустить файл
    try:
        # Проверка, какая версия Python используется
        python_exe = sys.executable
        print(f"Запуск {script_path} с помощью {python_exe}...")
        subprocess.Popen([python_exe, script_path], stderr=subprocess.PIPE, stdout=subprocess.PIPE)  # Логирование ошибок
    except Exception as e:
        print(f"Ошибка при запуске приложения: {e}")

# Создаем окно соглашения
agreement_window = tk.Tk()
agreement_window.title("Соглашение об использовании")
agreement_window.geometry("600x500")

# Текст документации
label_text = (
    "Документация к программе Алдар көсе\n\n"
    "Разработчик:\n"
    "Salem Software Corporation\n\n"
    "Обзор:\n"
    "Программа Алдар көсе — это учебный инструмент, предназначенный для демонстрации и тестирования методов словарных атак в контексте кибербезопасности. "
    "Она разработана с целью обучения студентов и специалистов в области информационной безопасности и позволяет изучить базовые принципы атак на системы аутентификации с использованием словарных атак.\n\n"
    "Цель программы:\n"
    "Программа помогает понять, как работают словарные атаки (dictionary attacks), и предоставляет интерфейс для выполнения таких атак в контролируемой и безопасной среде. "
    "Она предназначена для практического применения в образовательных целях и должна использоваться только в рамках обучения и тестирования.\n\n"
    "Основные функции:\n"
    "1. Словарная атака: Программа позволяет выполнять атаку на форму авторизации, используя заранее подготовленный список паролей. Она проходит через все пароли из словаря и пытается войти в систему.\n"
    "2. Интерфейс пользователя: Программа предоставляет графический интерфейс на базе Tkinter, который позволяет пользователю начать атаку, отслеживать статус попыток входа и получать уведомления о найденных паролях.\n"
    "3. Генерация случайных User-Agent: Для повышения реалистичности атак программа может случайным образом генерировать различные User-Agent'ы, чтобы имитировать поведение различных браузеров и устройств.\n"
    "4. Логирование: Все попытки входа и результаты атаки записываются в файл логов, что позволяет отслеживать успешные и неудачные попытки.\n\n"
    "Первоначальная настройка соглашения:\n"
    "При первом запуске программы пользователю показывается окно с соглашением об использовании программы. Программа будет продолжать работать только после принятия условий.\n\n"
    "Инструкция по использованию:\n"
    "1. Установка и запуск программы:\n"
    "Убедитесь, что на вашем компьютере установлен Python 3.x.\n"
    "Загрузите исходный код программы и все необходимые файлы.\n"
    "Запустите файл brute_gui.py для начала использования программы.\n\n"
    "2. Интерфейс:\n"
    "После запуска программы появляется окно с кнопкой 'Начать атаку'. Пользователь может нажать эту кнопку для начала словарной атаки.\n"
    "Программа будет использовать файл словаря top100_fake.txt, который должен быть заранее подготовлен.\n"
    "Во время атаки отображается текущий пароль, который пробует программа, а также статус выполнения.\n\n"
    "3. Генерация случайных User-Agent'ов:\n"
    "Программа использует модуль для случайной генерации User-Agent'ов, чтобы атака выглядела более естественно и могла обходить простые защиты.\n\n"
    "4. Логирование:\n"
    "Все попытки входа записываются в файл access.log для последующего анализа.\n\n"
    "Рекомендации по безопасности:\n"
    "Программа предназначена исключительно для образовательных целей. Использование ее в реальных атаках без разрешения является незаконным.\n"
    "Убедитесь, что вы запускаете программу в безопасной среде, например, на локальном сервере или в тестовом окружении.\n\n"
    "Заключение:\n"
    "Алдар көсе является мощным образовательным инструментом для изучения принципов работы словарных атак и помогает обучить студентов основам кибербезопасности. "
    "Однако важно помнить, что использование таких методов на реальных системах без разрешения владельцев может привести к юридическим последствиям."
)

# Создаем канвас с прокруткой
canvas = tk.Canvas(agreement_window)
canvas.pack(side="left", fill="both", expand=True)

# Добавляем вертикальную прокрутку
scrollbar = tk.Scrollbar(agreement_window, orient="vertical", command=canvas.yview)
scrollbar.pack(side="right", fill="y")

canvas.configure(yscrollcommand=scrollbar.set)

# Создаем фрейм внутри канваса, в который будет помещен текст
frame = tk.Frame(canvas)

# Помещаем текст документации в метку внутри фрейма
label = tk.Label(frame, text=label_text, justify="left", padx=10, pady=10)
label.pack(padx=10, pady=10)

# Добавляем фрейм в канвас
canvas.create_window((0, 0), window=frame, anchor="nw")

# Обновляем область прокрутки после добавления текста
frame.update_idletasks()
canvas.config(scrollregion=canvas.bbox("all"))

# Кнопка принятия соглашения
def accept_agreement():
    start_application()  # Запуск основного окна приложения

accept_button = tk.Button(agreement_window, text="Принять", command=accept_agreement)
accept_button.pack(pady=10)

# Запуск окна соглашения
agreement_window.mainloop()
